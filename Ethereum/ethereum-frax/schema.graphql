# User
type User @entity {
  # Address
  id: ID!

  # Liquidity Positions
  liquidityPositions: [LiquidityPosition!]! @derivedFrom(field: "user")
}

# Bundle
type Bundle @entity {
  id: ID!
  ethPrice: Float! # price of ETH usd
}

# Factory
type Factory @entity {
  # Contract address
  id: ID!

  # Pair count
  pairCount: BigInt!

  # Volume USD
  volumeUSD: Float!

  # Volume ETH
  volumeETH: Float!

  # Untracked volume
  untrackedVolumeUSD: Float!

  # Liquidity USD
  liquidityUSD: Float!

  # Liquidity ETH
  liquidityETH: Float!

  # Transaction count
  txCount: BigInt!

  # Token count
  tokenCount: BigInt!

  # User count
  userCount: BigInt!

  # Pairs
  pairs: [Pair!]! @derivedFrom(field: "factory")

  # Tokens
  tokens: [Token!]! @derivedFrom(field: "factory")

  # Hour data
  hourData: [HourData!]! @derivedFrom(field: "factory")

  # Day data
  dayData: [DayData!]! @derivedFrom(field: "factory")
}

# Hour Data
type HourData @entity {
  # start of hour timestamp
  id: ID!

  # date
  date: Int!

  # factory
  factory: Factory!

  # volume
  volumeETH: Float!
  volumeUSD: Float!
  untrackedVolume: Float!

  # liquidity
  liquidityETH: Float!
  liquidityUSD: Float!

  # tx count
  txCount: BigInt!
}

# Day Data
type DayData @entity {
  # timestamp / 86400
  id: ID!

  # date
  date: Int!

  # factory
  factory: Factory!

  # volume
  volumeETH: Float!
  volumeUSD: Float!
  untrackedVolume: Float!

  # liquidity
  liquidityETH: Float!
  liquidityUSD: Float!

  # tx count
  txCount: BigInt!
}

# Token
type Token @entity {
  # token address
  id: ID!

  # factory
  factory: Factory!

  # mirrored from the smart contract
  symbol: String!
  name: String!
  decimals: BigInt!

  # used for other stats like marketcap
  totalSupply: BigInt!

  # token specific volume
  volume: Float!
  volumeUSD: Float!
  untrackedVolumeUSD: Float!

  # transactions across all pairs
  txCount: BigInt!

  # liquidity across all pairs
  liquidity: Float!

  derivedETH: Float!

#  whitelistPairs: [Pair!]! @derivedFrom(field: "token0")
  # Token hour data
  hourData: [TokenHourData!]! @derivedFrom(field: "token")

  # Token day data
  dayData: [TokenDayData!]! @derivedFrom(field: "token")

  # Base pairs
  basePairs: [Pair!]! @derivedFrom(field: "token0")

  # Quote pairs
  quotePairs: [Pair!]! @derivedFrom(field: "token1")

  # Base pairs day data
  basePairsDayData: [PairDayData!]! @derivedFrom(field: "token0")

  # Quote pairs day data
  quotePairsDayData: [PairDayData!]! @derivedFrom(field: "token1")
}

# Token hour data
type TokenHourData @entity {
  # token id - hour start timestamp
  id: ID!

  # date - hour start timestamp
  date: Int!

  # token
  token: Token!

  # volume
  volume: Float!
  volumeETH: Float!
  volumeUSD: Float!

  # tx count
  txCount: BigInt!

  # liquidity
  liquidity: Float!
  liquidityETH: Float!
  liquidityUSD: Float!

  # price usd
  priceUSD: Float!
}

# Token day data
type TokenDayData @entity {
  # token id - day start timestamp
  id: ID!

  # date - day start timestamp
  date: Int!

  # token
  token: Token!

  # volume
  volume: Float!
  volumeETH: Float!
  volumeUSD: Float!

  # tx count
  txCount: BigInt!

  # liquidity
  liquidity: Float!
  liquidityETH: Float!
  liquidityUSD: Float!

  # price usd
  priceUSD: Float!
}

# Pair
type Pair @entity {
  # Contract address
  id: ID!

  # Factory
  factory: Factory!

  # Name
  name: String!

  # mirrored from the smart contract
  token0: Token!
  token1: Token!

  reserve0: Float!
  reserve1: Float!
  twammReserve0: Float!
  twammReserve1: Float!

  totalSupply: Float!

  # derived liquidity
  reserveETH: Float!
  reserveUSD: Float!

  # used for separating per pair reserves and global
  trackedReserveETH: Float!

  # Price in terms of the asset pair
  token0Price: Float!
  token1Price: Float!

  # lifetime volume stats
  volumeToken0: Float!
  volumeToken1: Float!
  volumeUSD: Float!
  untrackedVolumeUSD: Float!
  txCount: BigInt!

  # Fields used to help derived relationship
  # used to detect new exchanges
  liquidityProviderCount: BigInt!

  # lca: Float!
  # lcad: Float!

  # Liquidity positions
  liquidityPositions: [LiquidityPosition!]! @derivedFrom(field: "pair")

  # Liquidity position snapshots
  liquidityPositionSnapshots: [LiquidityPositionSnapshot!]! @derivedFrom(field: "pair")

  # Pair day data
  dayData: [PairDayData!]! @derivedFrom(field: "pair")

  # Pair hour data
  hourData: [PairHourData!]! @derivedFrom(field: "pair")

  # Transactions
  mints: [Mint!]! @derivedFrom(field: "pair")
  burns: [Burn!]! @derivedFrom(field: "pair")
  swaps: [Swap!]! @derivedFrom(field: "pair")

  # Created at
  timestamp: BigInt!
  block: BigInt!
}

# Pair hour data
type PairHourData @entity {
  # pair.id - hour start timestamp
  id: ID!

  # date - hour start timestamp
  date: Int!

  # pair
  pair: Pair!

  # reserves
  reserve0: Float!
  reserve1: Float!
  twammReserve0: Float!
  twammReserve1: Float!

  # derived liquidity
  reserveUSD: Float!

  # volume
  volumeToken0: Float!
  volumeToken1: Float!

  # volume usd
  volumeUSD: Float!

  # tx count
  txCount: BigInt!
}

# Pair day data
type PairDayData @entity {
  # pair id - day start timestamp
  id: ID!

  # date - day start timestamp
  date: Int!

  # pair
  pair: Pair!

  # token0
  token0: Token!

  # token1
  token1: Token!

  # reserves
  reserve0: Float!
  reserve1: Float!
  twammReserve0: Float!
  twammReserve1: Float!

  # total supply for LP historical returns
  totalSupply: Float!

  # derived liquidity
  reserveUSD: Float!

  # volume
  volumeToken0: Float!
  volumeToken1: Float!

  # volume usd
  volumeUSD: Float!

  # tx count
  txCount: BigInt!
}

# liquidity position
type LiquidityPosition @entity {
  id: ID!
  user: User!
  pair: Pair!
  liquidityTokenBalance: Float!
  snapshots: [LiquidityPositionSnapshot!] @derivedFrom(field: "liquidityPosition")
  block: Int!
  timestamp: Int!
}

# saved over time for return calculations, gets created and never updated
type LiquidityPositionSnapshot @entity {
  id: ID!
  liquidityPosition: LiquidityPosition!
  timestamp: Int! # saved for fast historical lookups
  block: Int! # saved for fast historical lookups
  user: User! # reference to user
  pair: Pair! # reference to pair
  token0PriceUSD: Float! # snapshot of token0 price
  token1PriceUSD: Float! # snapshot of token1 price
  reserve0: Float! # snapshot of pair token0 reserves
  reserve1: Float! # snapshot of pair token1 reserves
  twammReserve0: Float! # snapshot of pair token0 TWAMM reserves
  twammReserve1: Float! # snapshot of pair token1 TWAMM reserves
  reserveUSD: Float! # snapshot of pair reserves in USD
  liquidityTokenTotalSupply: Float! # snapshot of pool token supply
  # snapshot of users pool token balance
  liquidityTokenBalance: Float!
}

# transaction
type Transaction @entity {
  # transaction hash
  id: ID!
  blockNumber: BigInt!
  timestamp: BigInt!
  # This is not the reverse of Mint.transaction; it is only used to
  # track incomplete mints (similar for burns and swaps)
  mints: [Mint]! @derivedFrom(field: "transaction")
  burns: [Burn]! @derivedFrom(field: "transaction")
  swaps: [Swap]! @derivedFrom(field: "transaction")
#  mints: [Mint]
#  burns: [Burn]
#  swaps: [Swap]
}

# mint
type Mint @entity {
  # transaction hash - index of mint in transaction mints array
  id: ID!
  transaction: Transaction!
  timestamp: BigInt! # need this to pull recent txns for specific token or pair
  pair: Pair!

  # populated from the primary Transfer event
  to: String!
  liquidity: Float!

  # populated from the Mint event
  sender: String
  amount0: Float
  amount1: Float
  logIndex: BigInt
  # derived amount based on available prices of tokens
  amountUSD: Float

  # optional fee fields, if a Transfer event is fired in _mintFee
  feeTo: String
  feeLiquidity: Float
}

# burn
type Burn @entity {
  # transaction hash - index of burn in transaction burns array
  id: ID!
  transaction: Transaction!
  timestamp: BigInt! # need this to pull recent txns for specific token or pair
  pair: Pair!

  # populated from the primary Transfer event
  liquidity: Float!

  # populated from the Burn event
  sender: String
  amount0: Float
  amount1: Float
  to: String
  logIndex: BigInt
  # derived amount based on available prices of tokens
  amountUSD: Float

  # mark uncomplete in ETH case
  complete: Boolean!

  # optional fee fields, if a Transfer event is fired in _mintFee
  feeTo: String
  feeLiquidity: Float
}

# swap
type Swap @entity {
  # transaction hash - index of swap in transaction swaps array
  id: ID!
  transaction: Transaction!
  timestamp: BigInt! # need this to pull recent txns for specific token or pair
  pair: Pair!

  # populated from the Swap event
  sender: String!
  amount0In: Float!
  amount1In: Float!
  amount0Out: Float!
  amount1Out: Float!
  to: String!
  logIndex: BigInt

  # derived info
  amountUSD: Float!
}type Approval @entity {
  id: ID!
  owner: String! # address
  spender: String! # address
  value: BigInt! # uint256
}


type CancelLongTermOrder @entity {
  id: ID!
  addr: String! # address
  orderId: BigInt! # uint256
  sellToken: String! # address
  unsoldAmount: BigInt! # uint256
  buyToken: String! # address
  purchasedAmount: BigInt! # uint256
}

type LongTermSwap0To1 @entity {
  id: ID!
  addr: String! # address
  orderId: BigInt! # uint256
  amount0In: BigInt! # uint256
  numberOfTimeIntervals: BigInt! # uint256
}

type LongTermSwap1To0 @entity {
  id: ID!
  addr: String! # address
  orderId: BigInt! # uint256
  amount1In: BigInt! # uint256
  numberOfTimeIntervals: BigInt! # uint256
}

type Sync @entity {
  id: ID!
  reserve0: BigInt! # uint112
  reserve1: BigInt! # uint112
  twammReserve0: Float!
  twammReserve1: Float!
}

type Transfer @entity {
  id: ID!
  from: String! # address
  to: String! # address
  value: BigInt! # uint256
}

type VirtualOrderExecution @entity {
  id: ID!
  blocktimestamp: BigInt! # uint256
  newReserve0: BigInt! # uint256
  newReserve1: BigInt! # uint256
  newTwammReserve0: BigInt! # uint256
  newTwammReserve1: BigInt! # uint256
  token0Bought: BigInt! # uint256
  token1Bought: BigInt! # uint256
  token0Sold: BigInt! # uint256
  token1Sold: BigInt! # uint256
  expiries: BigInt! # uint256
}

type WithdrawProceedsFromLongTermOrder @entity {
  id: ID!
  addr: String! # address
  orderId: BigInt! # uint256
  proceedToken: String! # address
  proceeds: BigInt! # uint256
  orderExpired: Boolean! # bool
}
