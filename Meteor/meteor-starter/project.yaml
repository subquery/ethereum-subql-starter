specVersion: "1.0.0"

name: "meter-subql-starter"
version: "0.0.1"
runner:
  node:
    name: "@subql/node-ethereum"
    version: "*"
  query:
    name: "@subql/query"
    version: "*"
description: "This project can be use as a starting point for developing your new Meter SubQuery project"
repository: "https://github.com/subquery/ethereum-subql-starter"

schema:
  file: "./schema.graphql"

network:
  # chainId is the EVM Chain ID, for Meter this is 82
  # https://chainlist.org/chain/82
  chainId: "82"
  # This endpoint must be a public non-pruned archive node
  # We recommend providing more than one endpoint for improved reliability, performance, and uptime
  # Public nodes may be rate limited, which can affect indexing speed
  # When developing your project we suggest getting a private API key
  # You can get them from OnFinality for free https://app.onfinality.io
  # https://documentation.onfinality.io/support/the-enhanced-api-service
#  endpoint: ["https://meter.blockpi.network/v1/rpc/public"]
  endpoint: ["https://rpc-meter.jellypool.xyz/"]
  # Recommended to provide the HTTP endpoint of a full chain dictionary to speed up processing
  dictionary: "https://gx.api.subquery.network/sq/subquery/meteor-dictionary"

dataSources:
  - kind: ethereum/Runtime # We use ethereum runtime since Meter is a layer-2 that is compatible
    startBlock: 41279094  # This is the block that the contract was deployed on
    options:
#      # Must be a key of assets
      abi: erc20
      address: "0x983147fb73a45fc7f8b4dfa1cd61bdc7b111e5b6" # This is the contract address for wrapped ether https://scan.meter.io/address/0x983147fb73a45fc7f8b4dfa1cd61bdc7b111e5b6
    assets:
      erc20:
        file: "./abis/erc20.abi.json"
    mapping:
      file: "./dist/index.js"
      handlers:
        - handler: handleTransaction
          kind: ethereum/TransactionHandler # We use ethereum handlers since Meter is a layer-2 that is compatible
          filter:
            ## The function can either be the function fragment or signature
#             function: '0x095ea7b3'
            # function: '0x7ff36ab500000000000000000000000000000000000000000000000000000000'
            function: approve(address owner, address spender, uint256 rawAmount)
        - handler: handleLog
          kind: ethereum/LogHandler # We use ethereum handlers since Meter is a layer-2 that is compatible
          filter:
            topics:
              ## Follows standard log filters https://docs.ethers.io/v5/concepts/events/
              - Transfer(address indexed from, address indexed to, uint256 amount)
